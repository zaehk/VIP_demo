//
//  MovieSearchViewController.swift
//  VIP_demo
//
//  Created by Borja Saez de Guinoa Vilaplana on 10/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieSearchDisplayLogic: class, BaseViewDisplayLogic
{
    
}

class MovieSearchViewController: BaseViewController
{
    var interactor: MovieSearchBusinessLogic?
    var router: (NSObjectProtocol & MovieSearchRoutingLogic & MovieSearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MovieSearchInteractor()
        let presenter = MovieSearchPresenter()
        let router = MovieSearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupViews()
        setupConstraints()
    }
    
    // MARK: Views
    
    private let searchBar: UISearchBar = {
        let bar = UISearchBar.init()
        bar.barStyle = .black
        bar.searchBarStyle = .minimal
        bar.placeholder = Constants.Search.searchBarPlaceholder
        return bar
    }()
    
    private let resultsCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
        let collectionView = UICollectionView.init(frame: CGRect.init(), collectionViewLayout: layout)
        collectionView.backgroundColor = Constants.Styles.mainColor
        collectionView.keyboardDismissMode = .onDrag
        collectionView.showsVerticalScrollIndicator = true
        collectionView.contentInset = UIEdgeInsets.init(top: 10, left: 20, bottom: 10, right: 20)
        return collectionView
    }()
    
    private func setupViews(){
        self.view.addSubview(searchBar)
        self.view.addSubview(resultsCollectionView)
        searchBar.delegate = self
    }
    
    private func setupConstraints(){
        searchBar.snp.makeConstraints { (make) in
            make.top.left.right.equalTo(self.view.safeAreaLayoutGuide)
        }
        
        resultsCollectionView.snp.makeConstraints { (make) in
            make.top.equalTo(searchBar.snp.bottom)
            make.left.right.bottom.equalTo(self.view.safeAreaLayoutGuide)
        }
    }
    
}

//MARK: -SearchBar delegate implementation

extension MovieSearchViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        //interactor.search..
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
}

//MARK: -Display logic implementation

extension MovieSearchViewController: MovieSearchDisplayLogic {
    
    
}
