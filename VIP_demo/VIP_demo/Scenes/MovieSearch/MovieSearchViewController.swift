//
//  MovieSearchViewController.swift
//  VIP_demo
//
//  Created by Borja Saez de Guinoa Vilaplana on 10/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieSearchDisplayLogic: class, BaseViewDisplayLogic
{
    func showResultMovies(movies: [CollectionDrawerItemProtocol])
}

class MovieSearchViewController: BaseViewController
{
    var interactor: MovieSearchBusinessLogic?
    var router: (NSObjectProtocol & MovieSearchRoutingLogic & MovieSearchDataPassing)?
    
    private var resultMovieCells: [CollectionDrawerItemProtocol] = []
    var selectedIndex: Int = 0
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupViews()
        setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.setNavigationBarHidden(true, animated: true)
    }
    
    // MARK: Views
    
    private let searchBar: UISearchBar = {
        let bar = UISearchBar.init()
        bar.barStyle = .black
        bar.searchBarStyle = .minimal
        bar.placeholder = Constants.Search.searchBarPlaceholder
        return bar
    }()
    
    let resultsCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
        let collectionView = UICollectionView.init(frame: CGRect.init(), collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        collectionView.keyboardDismissMode = .onDrag
        collectionView.indicatorStyle = .white
        collectionView.showsVerticalScrollIndicator = true
        collectionView.contentInset = UIEdgeInsets.init(top: 10, left: 20, bottom: 10, right: 20)
        return collectionView
    }()
    
    private func setupViews(){
        self.view.addSubview(searchBar)
        self.view.addSubview(resultsCollectionView)
        searchBar.delegate = self
        resultsCollectionView.delegate = self
        resultsCollectionView.dataSource = self
    }
    
    private func setupConstraints(){
        searchBar.snp.makeConstraints { (make) in
            make.top.left.right.equalTo(self.view.safeAreaLayoutGuide)
        }
        
        resultsCollectionView.snp.makeConstraints { (make) in
            make.top.equalTo(searchBar.snp.bottom)
            make.left.right.bottom.equalTo(self.view.safeAreaLayoutGuide)
        }
    }
    
    private func updateResultCells(newResults: [CollectionDrawerItemProtocol]){
        self.resultMovieCells = newResults
        resultsCollectionView.reloadData()
    }
    
}

//MARK: -CollectionView management

extension MovieSearchViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cellModel = resultMovieCells[indexPath.row]
        let drawer = cellModel.collectionDrawer
        let cell = drawer.dequeueCollectionCell(collectionView, indexPath: indexPath)
        drawer.drawCollectionCell(cell, withItem: cellModel)
        return cell
    }
    
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        resultMovieCells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedIndex = indexPath.row
        router?.routeToMovieDetail()
    }
    
}


//MARK: -SearchBar delegate implementation

extension MovieSearchViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        interactor?.fetchMovies(queryString: searchBar.text ?? "")
        searchBar.resignFirstResponder()
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        updateResultCells(newResults: [])
        searchBar.resignFirstResponder()
    }
    
}

//MARK: -Display logic implementation

extension MovieSearchViewController: MovieSearchDisplayLogic {
    
    func showResultMovies(movies: [CollectionDrawerItemProtocol]) {
        updateResultCells(newResults: movies)
    }
    
}
