//
//  MovieDetailPresenterTests.swift
//  VIP_demo
//
//  Created by Borja Saez de Guinoa Vilaplana on 13/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com


@testable import VIP_demo
import XCTest

class MovieDetailPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: MovieDetailPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupMovieDetailPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMovieDetailPresenter()
    {
        sut = MovieDetailPresenter()
    }
    
    // MARK: Test doubles
    
    class MovieDetailDisplayLogicSpy: MovieDetailDisplayLogic
    {
        
        var displayMovieInfoCalled = false
        var displayErrorFetchingMovieDetailCalled = false
        var numberOfAdditionalInfoCells = 0
        
        func displayMovieInfo(viewModel: MovieDetailViewModel) {
            displayMovieInfoCalled = true
            numberOfAdditionalInfoCells = viewModel.detailCells.count
        }
        
        func displayErrorFetchingMovieDetail(emptyStateCell: DrawerItemProtocol) {
            displayErrorFetchingMovieDetailCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testPresentMovieInfo()
    {
        // Given
        let spy = MovieDetailDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        let movieDetailRM: MovieDetailResponseModel = JSONMockDecoder.decode(mock: "movieDetailResponseMock")
        sut.presentMovieInfo(movieDetail: movieDetailRM, casting: [], crew: [], reviews: [])
        
        // Then
        XCTAssertTrue(spy.displayMovieInfoCalled, "presentMovieInfo() should ask the view controller to display the movie info")
    }
    
    func testPresentMovieDetailError()
    {
        // Given
        let spy = MovieDetailDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        
        sut.presentMovieDetailError()
        
        // Then
        XCTAssertTrue(spy.displayErrorFetchingMovieDetailCalled, "presentMovieInfo() should ask the view controller to display an error")
    }
    
    func testPresentMovieAdditionalInfo()
    {
        // Given
        let spy = MovieDetailDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        let movieDetailRM: MovieDetailResponseModel = JSONMockDecoder.decode(mock: "movieDetailResponseMock")
        let review: ReviewResultResponseModel = JSONMockDecoder.decode(mock: "reviewResultMock")
        let casting: MovieCastMemberResponseModel = JSONMockDecoder.decode(mock: "castOrCrewResponseMock")
        
        sut.presentMovieInfo(movieDetail: movieDetailRM, casting: [casting], crew: [], reviews: [review])
        
        // Then
        XCTAssertEqual(spy.numberOfAdditionalInfoCells, 3, "presentMovieInfo() should ask the view controller to display 3 cells (movie info,casting and review) and not the empty one (crew)")
    }
    
    
    
}
