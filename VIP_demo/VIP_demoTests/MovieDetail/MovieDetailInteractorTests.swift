//
//  MovieDetailInteractorTests.swift
//  VIP_demo
//
//  Created by Borja Saez de Guinoa Vilaplana on 13/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import VIP_demo
import XCTest

class MovieDetailInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: MovieDetailInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupMovieDetailInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMovieDetailInteractor()
  {
    sut = MovieDetailInteractor()
    sut.movieIdentifier = 1234
  }
  
  // MARK: Test doubles
  
  class MovieDetailPresentationLogicSpy: MovieDetailPresentationLogic
  {
    
    var presentMovieInfoCalled = false
    var presentMovieDetailErrorCalled = false
    var expectation: XCTestExpectation?
    
    func presentMovieInfo(movieDetail: MovieDetailResponseModel, casting: [MovieCastMemberResponseModel], crew: [MovieCastMemberResponseModel], reviews: [ReviewResultResponseModel]) {
        presentMovieInfoCalled = true
        expectation?.fulfill()
    }
    
    func presentMovieDetailError() {
        presentMovieDetailErrorCalled = true
        expectation?.fulfill()
    }
    
  }
  
  // MARK: Tests
  
    func testAllMovieDetailCategoriesSucceed()
    {
        // Given
        let spy = MovieDetailPresentationLogicSpy()
        spy.expectation = expectation(description: "Downloading movies detail info")
        sut.presenter = spy
        sut.movieService = MovieServiceMock.init(popular: .error, detail: .success, topRated: .error, newReleases: .error, upcoming: .error, reviews: .success, search: .error)
        sut.castingService = CastingServiceMock.init(expectedFromCasting: .success)
        // When
        sut.fetchMovieDetail()
        
        // Wait
        waitForExpectations(timeout: 1, handler: nil)
        
        // Then
        XCTAssertTrue(spy.presentMovieInfoCalled, "doSomething(request:) interactor should ask the presenter to present the movie only if movieDetail service returned info")
        XCTAssertFalse(spy.presentMovieDetailErrorCalled, "doSomething(request:) interactor should not call presentMovieDetailErrorCalled if movieDetail service returned success")
    }
    
    func testAllMovieDetailCategoriesFailed()
    {
        // Given
        let spy = MovieDetailPresentationLogicSpy()
        spy.expectation = expectation(description: "Downloading movies detail info")
        sut.presenter = spy
        sut.movieService = MovieServiceMock.init(popular: .error, detail: .error, topRated: .error, newReleases: .error, upcoming: .error, reviews: .success, search: .error)
        sut.castingService = CastingServiceMock.init(expectedFromCasting: .success)
        // When
        sut.fetchMovieDetail()
        
        // Wait
        waitForExpectations(timeout: 1, handler: nil)
        
        // Then
        XCTAssertTrue(spy.presentMovieDetailErrorCalled, "doSomething(request:) interactor should call presentMovieDetailErrorCalled if movieDetail service returned fail")
        XCTAssertFalse(spy.presentMovieInfoCalled, "doSomething(request:) interactor should not ask the presenter to present the movie if movieDetail service returned fail")
    }
    
}
